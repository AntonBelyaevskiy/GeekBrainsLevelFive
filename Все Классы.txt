public class CloudController {

    @FXML
    public Button download;
    @FXML
    public Button refreshCloudFile;
    @FXML
    public Button deleteCloudFile;
    @FXML
    public Button refreshLocalFile;
    @FXML
    public Button deleteLocalFile;
    @FXML
    public Button upload;
    @FXML
    private CloudNetwork network;

    @FXML
    public VBox loginPane;
    @FXML
    public VBox cloudPane;
    @FXML
    public VBox registrationPane;

    private Path pathToStorage;

    @FXML
    private TableView<ElementForTableView> localTableView;
    @FXML
    private TableColumn<ElementForTableView, String> localFileName;
    @FXML
    private TableColumn<ElementForTableView, String> localFileSize;
    @FXML
    private TableColumn<ElementForTableView, Date> localFileCreateDate;

    private ObservableList<ElementForTableView> localItems = FXCollections.observableArrayList();

    @FXML
    private TableView<ElementForTableView> cloudTableView;
    @FXML
    private TableColumn<ElementForTableView, String> cloudFileName;
    @FXML
    private TableColumn<ElementForTableView, String> cloudFileSize;
    @FXML
    private TableColumn<ElementForTableView, Date> cloudFileCreateDate;

    private ObservableList<ElementForTableView> cloudItems = FXCollections.observableArrayList();

    private static final int PORT = 8189;
    private static final String SERVER_IP = "localhost";

    @FXML
    public void initialize(){

        localFileName.prefWidthProperty().bind(localTableView.widthProperty().divide(2.6));
        localFileSize.prefWidthProperty().bind(localTableView.widthProperty().divide(4.2));
        localFileCreateDate.prefWidthProperty().bind(localTableView.widthProperty().divide(2.7));

        cloudFileName.prefWidthProperty().bind(cloudTableView.widthProperty().divide(2.6));
        cloudFileSize.prefWidthProperty().bind(cloudTableView.widthProperty().divide(4.2));
        cloudFileCreateDate.prefWidthProperty().bind(cloudTableView.widthProperty().divide(2.7));

        download.setCursor(Cursor.HAND);
        upload.setCursor(Cursor.HAND);
        deleteCloudFile.setCursor(Cursor.HAND);
        deleteLocalFile.setCursor(Cursor.HAND);
        refreshCloudFile.setCursor(Cursor.HAND);
        refreshLocalFile.setCursor(Cursor.HAND);
    }



    private void drawLocalTableView() {
        localItems.clear();

        pathToStorage = Paths.get("client/storage");
        walkToLocalDirectory(pathToStorage);

        localTableView.itemsProperty().setValue(localItems);

        localFileName.setCellValueFactory(param -> new SimpleStringProperty(param.getValue().getName()));
        localFileSize.setCellValueFactory(param -> new SimpleStringProperty(param.getValue().getSize()));
        localFileCreateDate.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().getCreateDate()));
    }

    private void drawCloudTableView() {
        cloudItems.clear();
        cloudTableView.itemsProperty().setValue(cloudItems);

        cloudItems.addAll(network.getCloudFilesStorage());

        cloudFileName.setCellValueFactory(param -> new SimpleStringProperty(param.getValue().getName()));
        cloudFileSize.setCellValueFactory(param -> new SimpleStringProperty(param.getValue().getSize()));
        cloudFileCreateDate.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().getCreateDate()));
    }

    public void goToRegistration(ActionEvent actionEvent) {
        loginPane.setVisible(false);
        loginPane.setManaged(false);
        registrationPane.setVisible(true);
        registrationPane.setManaged(true);
    }

    public void goToCloud(ActionEvent actionEvent) {
        loginPane.setVisible(false);
        loginPane.setManaged(false);
        cloudPane.setVisible(true);
        cloudPane.setManaged(true);

        connect();
    }

    public void backToLogin(ActionEvent actionEvent) {
        registrationPane.setVisible(false);
        registrationPane.setManaged(false);
        loginPane.setVisible(true);
        loginPane.setManaged(true);
    }

    public void connect() {
        network = CloudNetwork.getNetwork();
        network.run(PORT, SERVER_IP, "testLogin");

        drawLocalTableView();
        drawCloudTableView();
    }

    private void walkToLocalDirectory(Path path) {
        try {
            Files.walkFileTree(path, new FileVisitor<Path>() {
                @Override
                public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    putFileInTableView(file);
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                    return FileVisitResult.CONTINUE;
                }
            });
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private void putFileInTableView(Path file) {
        try {
            String name = file.getFileName().toString();
            String size = String.valueOf(file.toFile().length());
            BasicFileAttributes attributes = Files.readAttributes(file, BasicFileAttributes.class);
            Date createDate = new Date(attributes.creationTime().to(TimeUnit.MILLISECONDS));
            ElementForTableView element = new ElementForTableView(name, size, createDate);
            localItems.add(element);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public void uploadFile(ActionEvent actionEvent) {
        String name = getSelectedFileNameLocal(localTableView);
        if (name == null) {
            return;
        }
        network.uploadFileOnCloud(name);
    }

    public void downloadFileFromCloud(ActionEvent actionEvent) {
        String name = getSelectedFileNameCloud(cloudTableView);
        if (name == null) {
            return;
        }
        network.downloadFileFromCloud(name);
    }

    public void deleteFileOnLocalStorage(ActionEvent actionEvent) {
        String name = getSelectedFileNameLocal(localTableView);
        if (name == null) {
            return;
        }
        try {
            System.out.println("сейчас будет удален файл " + Paths.get("client/storage/" + name));
            Files.delete(Paths.get("client/storage/" + name));
            drawLocalTableView();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void deleteFileOnCloudStorage(ActionEvent actionEvent) {
        String name = getSelectedFileNameCloud(cloudTableView);
        if (name == null) {
            return;
        }

        network.deleteFileOnCloudStorage(name);
    }


    private String getSelectedFileNameLocal(TableView<ElementForTableView> tableView) {

        if (tableView == cloudTableView || tableView.getSelectionModel().getSelectedItem() == null) {
            return null;
        }
        ElementForTableView element = tableView.getSelectionModel().getSelectedItem();
        return element.getName();
    }

    private String getSelectedFileNameCloud(TableView<ElementForTableView> tableView) {

        if (tableView == localTableView || tableView.getSelectionModel().getSelectedItem() == null) {
            return null;
        }
        ElementForTableView element = tableView.getSelectionModel().getSelectedItem();
        return element.getName();
    }

    public void updateLocalView(ActionEvent actionEvent) {
        drawLocalTableView();
    }

    public void updateCloudView(ActionEvent actionEvent) {
        drawCloudTableView();
    }
}

///////////////////////////////////////////////////////////////////////////////

public class CloudNetwork {

    private volatile static CloudNetwork network;

    private Socket socket;
    private ObjectEncoderOutputStream encoder;
    private ObjectDecoderInputStream decoder;

    private ArrayList<ElementForTableView> cloudStorage;

    private CloudNetwork() {
    }

    public static CloudNetwork getNetwork() {
        if (network == null) {
            synchronized (CloudNetwork.class) {
                if (network == null) {
                    network = new CloudNetwork();
                }
            }
        }
        return network;
    }

    public void run(final int port, final String ip, String login) {
        try {
            socket = new Socket(ip, port);
            encoder = new ObjectEncoderOutputStream(socket.getOutputStream());
            decoder = new ObjectDecoderInputStream(socket.getInputStream());

            encoder.writeObject(new CloudFilesList(login));

            Thread authThread = new Thread(() -> {
                try {
                    while (true) {
                        Object message = decoder.readObject();

                        if (message instanceof CloudFilesList)
                            takeFilesListFromServer((CloudFilesList) message);

                        if (message instanceof CloudCommand) {
                            if (((CloudCommand) message).getCommandName().equals("/exit"))
                                System.exit(0);
                            else
                                doCommand((CloudCommand) message);
                        }
                        if (message instanceof CloudFile)
                            saveFile((CloudFile) message);
                    }
                } catch (IOException | ClassNotFoundException e) {
                    e.printStackTrace();
                } finally {
                    try {
                        socket.close();
                        encoder.close();
                        decoder.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    System.out.println("disconnect");
                }
            });

            Object message = decoder.readObject();
            if (message instanceof CloudFilesList) {
                takeFilesListFromServer((CloudFilesList) message);
            }
            authThread.setDaemon(true);
            authThread.start();

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    private void takeFilesListFromServer(CloudFilesList message) {
        System.out.println("пришел список файлов");
        cloudStorage = message.getServerStorageList();
    }

    private void doCommand(CloudCommand message) {
        System.out.println(message.getCommandName());

        if (message.getCommandName().equals("/updateList")) {
            System.out.println("список обновился");
        }
    }


    private void saveFile(CloudFile message) {
        Path path = Paths.get("client/storage/" + message.getName());
        byte[] content = message.getContent();

        if (Files.exists(path)) {
            try {
                Files.delete(path);
                Files.write(path, content, StandardOpenOption.CREATE_NEW);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                Files.write(path, content, StandardOpenOption.CREATE_NEW);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public ArrayList<ElementForTableView> getCloudFilesStorage() {
        return cloudStorage;
    }

    public void uploadFileOnCloud(String name) {
        CloudFile file = makeFile(name);
        try {
            encoder.writeObject(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void downloadFileFromCloud(String name) {
        CloudCommand command = new CloudCommand("/downloadFile", name);
        try {
            encoder.writeObject(command);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private CloudFile makeFile(String name) {
        byte[] content = new byte[0];
        try {
            content = Files.readAllBytes(Paths.get("client/storage/" + name));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new CloudFile(name, content);
    }

    public void deleteFileOnCloudStorage(String name) {
        CloudCommand command = new CloudCommand("/deleteFile", name);
        try {
            encoder.writeObject(command);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

///////////////////////////////////////////////////////////////////////////////

public class Main extends Application {

    private static final String FXML = "/fxml/cloud.fxml";
    private static final String TITLE = "Cloud service";
    private static final int WIDTH = 600;
    private static final int HEIGHT = 500;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Parent root = FXMLLoader.load(getClass().getResource(FXML));
        primaryStage.setTitle(TITLE);
        Scene scene = new Scene(root, Main.WIDTH, Main.HEIGHT);
        primaryStage.setMinHeight(500.0);
        primaryStage.setMinWidth(600.0);
        primaryStage.setScene(scene);

        primaryStage.show();
    }
}

///////////////////////////////////////////////////////////////////////////////

public class CloudCommand extends CloudMessage {
    private String commandName;
    private String fileName;


    public CloudCommand(String commandName) {
        this.commandName = commandName;
    }

    public CloudCommand(String commandName, String fileName) {
        this.commandName = commandName;
        this.fileName = fileName;
    }

    public String getCommandName() {
        return commandName;
    }

    public void setCommandName(String commandName) {
        this.commandName = commandName;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }
}

///////////////////////////////////////////////////////////////////////////////

public class CloudFile extends CloudMessage {
    private String name;
    private byte[] content;

    public CloudFile(String name, byte[] content) {
        this.name = name;
        this.content = content;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public byte[] getContent() {
        return content;
    }

    public void setContent(byte[] content) {
        this.content = content;
    }
}

///////////////////////////////////////////////////////////////////////////////

public class CloudFilesList extends CloudMessage {

    private String login;
    private ArrayList<ElementForTableView> serverStorageList;

    public CloudFilesList(String login) {
        this.login = login;
        serverStorageList = new ArrayList<>();
    }

    public String getLogin() {
        return login;
    }

    public ArrayList<ElementForTableView> getServerStorageList() {
        return serverStorageList;
    }

    public void setServerStorageList(ArrayList<ElementForTableView> serverStorageList) {
        this.serverStorageList = serverStorageList;
    }
}

///////////////////////////////////////////////////////////////////////////////

public abstract class CloudMessage implements Serializable {

}

///////////////////////////////////////////////////////////////////////////////

public class ElementForTableView implements Serializable {

    private String name;
    private String size;
    private Date createDate;

    public ElementForTableView(String name, String size, Date createDate) {
        this.name = name;
        this.size = size + " КБ";
        this.createDate = createDate;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSize() {
        return size;
    }

    public void setSize(String size) {
        this.size = size;
    }

    public Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

}

///////////////////////////////////////////////////////////////////////////////

public class CloudAuthGateway extends ChannelInboundHandlerAdapter {
    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        ctx.fireChannelRead(msg);
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
    }
}

///////////////////////////////////////////////////////////////////////////////

public class CloudServer {

    private static final int MAX_OBJ_SIZE = 1024 * 1024 * 100;
    private static final int PORT = 8189;

    public void run() {
        EventLoopGroup mainGroup = new NioEventLoopGroup();
        EventLoopGroup workGroup = new NioEventLoopGroup();

        try {
            ServerBootstrap boot = new ServerBootstrap();
            boot.group(mainGroup, workGroup).channel(NioServerSocketChannel.class)
                    .childHandler(new ChannelInitializer<SocketChannel>() {
                        @Override
                        protected void initChannel(SocketChannel socketChannel) throws Exception {
                            socketChannel.pipeline().addLast(
                                    new ObjectDecoder(MAX_OBJ_SIZE, ClassResolvers.cacheDisabled(null)),
                                    new ObjectEncoder(),
                                    new CloudAuthGateway(),
                                    new CloudServerHandler()
                            );
                        }
                    })
                    .option(ChannelOption.SO_BACKLOG, 128)
                    .option(ChannelOption.TCP_NODELAY, true)
                    .childOption(ChannelOption.SO_KEEPALIVE, true);

            ChannelFuture channelFuture = boot.bind(PORT).sync();
            channelFuture.channel().closeFuture().sync();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            mainGroup.shutdownGracefully();
            workGroup.shutdownGracefully();
        }
    }
}

///////////////////////////////////////////////////////////////////////////////

public class CloudServerHandler extends ChannelInboundHandlerAdapter {

    private String login;

    @Override
    public void channelActive(ChannelHandlerContext ctx) throws Exception {
        System.out.println("Client is connected...");
    }

    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        try {
            if (msg == null)
                return;

            if (msg instanceof CloudFilesList) {
                CloudFilesList message = (CloudFilesList) msg;
                ArrayList<ElementForTableView> files = walkToLocalDirectory(message.getLogin());
                login = message.getLogin();
                System.out.println("Ask storage's files");

                CloudFilesList answer = new CloudFilesList(login);
                answer.setServerStorageList(files);
                ctx.write(answer);
            }
            else if (msg instanceof CloudCommand) {
                if(((CloudCommand) msg).getCommandName().equals("/downloadFile")){
                    CloudFile file = takeFile(((CloudCommand) msg).getFileName());
                    ctx.write(file);
                } else if(((CloudCommand) msg).getCommandName().equals("/deleteFile")){
                    Path path = Paths.get("server/storage/" + login + "/" + ((CloudCommand) msg).getFileName());
                    System.out.println(path);
                    Files.delete(path);
                    CloudFilesList message = new CloudFilesList(login);
                    ArrayList<ElementForTableView> files = walkToLocalDirectory(login);
                    message.setServerStorageList(files);
                    ctx.write(message);

                }
            }
            else if (msg instanceof CloudFile) {
                System.out.println("file came on server " + ((CloudFile) msg).getName());
                Path path = Paths.get("server/storage/" + login + "/" + ((CloudFile) msg).getName());
                byte[] content = ((CloudFile) msg).getContent();
                if (Files.exists(path)) {
                    Files.delete(path);
                    makeFile(path, content);
                } else {
                    makeFile(path, content);
                }
                ArrayList<ElementForTableView> files = walkToLocalDirectory(login);
                CloudFilesList answer = new CloudFilesList("cloudFilesList");
                answer.setServerStorageList(files);
                ctx.write(answer);
            }
        } finally {
            ReferenceCountUtil.release(msg);
        }
    }

    private void makeFile(Path path, byte[] content) throws IOException {
        Files.write(path, content, StandardOpenOption.CREATE_NEW);
    }

    private CloudFile takeFile(String fileName) {
        Path path = Paths.get("server/storage/" + login + "/" + fileName);
        byte[] content = new byte[(int) path.toFile().length()];
        try {
            content = Files.readAllBytes(path);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new CloudFile(fileName, content);
    }

    @Override
    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
        ctx.flush();
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        cause.printStackTrace();
        ctx.close();
    }

    private ArrayList<ElementForTableView> walkToLocalDirectory(String login) {
        Path path = Paths.get("server/storage/" + login);
        System.out.println(path);
        final ArrayList<ElementForTableView> files = new ArrayList<>();
        try {
            Files.walkFileTree(path, new FileVisitor<Path>() {
                @Override
                public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                    //задать логику при обнаружении директории
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    BasicFileAttributes attributes = Files.readAttributes(file, BasicFileAttributes.class);
                    String name = file.getFileName().toString();
                    String size = String.valueOf(file.toFile().length());
                    Date createDate = new Date(attributes.creationTime().to(TimeUnit.MILLISECONDS));
                    files.add(new ElementForTableView(name, size, createDate));
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                    return FileVisitResult.CONTINUE;
                }
            });
        } catch (IOException e) {
            e.printStackTrace();
        }
        return files;
    }
}

///////////////////////////////////////////////////////////////////////////////

public class Main {
    public static void main(String[] args) {
        new CloudServer().run();
    }
}
